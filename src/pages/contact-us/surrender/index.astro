---
import Base from "../../../layouts/Base.astro";
const account = import.meta.env.PUBLIC_ASM_ACCOUNT || 'st3418';
const base = import.meta.env.PUBLIC_ASM_BASE || 'https://service.sheltermanager.com/asmservice';
const TURNSTILE_SITE_KEY = import.meta.env.PUBLIC_TURNSTILE_SITE_KEY || '';
export const prerender = false;

// Default form ID for surrender (can be overridden by URL param)
const url = new URL(Astro.request.url);
const formid = url.searchParams.get('formid') || '36';
---

<Base title="Surrender an Animal">
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <div class="text-center mb-10">
      <div class="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-red-100 to-orange-100 rounded-full mb-4">
        <span class="text-3xl">üè†</span>
      </div>
      <h1 class="text-4xl font-bold text-gray-900 mb-4">Surrender an Animal</h1>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto">
        We understand that surrendering a pet is a difficult decision. Please complete the form below 
        and our team will review your submission as soon as possible.
      </p>
    </div>

    {account && formid ? (
      <>
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6 md:p-8">
          <form id="asm-form" class="space-y-6" action="/api/submit" method="POST" enctype="multipart/form-data">
            <input type="hidden" name="formid" value={formid} />
            
            <!-- Dynamic form fields will be inserted here -->
            <div id="asm-fields" class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <!-- Loading skeleton -->
              <div class="col-span-full animate-pulse">
                <div class="h-10 bg-gray-200 rounded mb-4"></div>
                <div class="h-10 bg-gray-200 rounded mb-4"></div>
                <div class="h-32 bg-gray-200 rounded mb-4"></div>
                <div class="h-10 bg-gray-200 rounded w-32"></div>
              </div>
            </div>

            <!-- Turnstile widget -->
            {TURNSTILE_SITE_KEY && (
              <div class="pt-4 border-t border-gray-200">
                <div class="cf-turnstile" data-sitekey={TURNSTILE_SITE_KEY}></div>
              </div>
            )}

            <!-- Submit button -->
            <div class="pt-6">
              <button 
                type="submit" 
                id="submit-btn"
                disabled
                class="px-8 py-3 rounded-xl bg-gradient-to-r from-purple-600 to-pink-600 text-white font-semibold hover:from-purple-700 hover:to-pink-700 transition-all shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Submit Surrender Request
              </button>
            </div>
          </form>
        </div>

        <!-- Field template for JavaScript -->
        <template id="field-tpl">
          <div class="flex flex-col gap-2">
            <label class="text-sm font-medium text-gray-700"></label>
            <div class="field-container w-full"></div>
            <p class="text-xs text-gray-500"></p>
            <p class="error-message text-xs text-red-600 hidden"></p>
          </div>
        </template>

        <!-- Load Turnstile -->
        {TURNSTILE_SITE_KEY && (
          <script src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>
        )}
        
        <!-- Form builder script -->
        <script type="module" define:vars={{ account, formid }}>
          const container = document.getElementById("asm-fields");
          const tpl = document.getElementById("field-tpl");
          const submitBtn = document.getElementById("submit-btn");

          // Field type mappings
          const typeMap = {
            TEXT: () => createInput("text"),
            EMAIL: () => createInput("email"),
            NUMBER: () => createInput("number"),
            TEXTAREA: () => createTextarea(),
            LOOKUP: (f) => createSelect(f, false),
            "MULTI-LOOKUP": (f) => createSelect(f, true),
            RADIO: (f) => createRadios(f),
            CHECKBOX: (f) => createCheckbox(f),
            YESNO: (f) => createRadios(f), // ASM Yes/No field
            DATE: () => createInput("date"),
            FILE: () => createFileInput(),
            GDPR: (f) => createGDPR(f),
            HTMLNOTE: (f) => createHTMLNote(f), // HTML display field
            NOTES: () => createTextarea() // Notes field
          };

          function createInput(type) {
            const el = document.createElement("input");
            el.type = type;
            el.className = "w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 transition-colors";
            return el;
          }

          function createTextarea() {
            const el = document.createElement("textarea");
            el.className = "w-full rounded-lg border border-gray-300 px-4 py-2 h-32 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 transition-colors";
            return el;
          }

          function createFileInput() {
            const el = document.createElement("input");
            el.type = "file";
            el.className = "w-full file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-purple-50 file:text-purple-700 hover:file:bg-purple-100";
            el.accept = "image/*,.pdf,.doc,.docx";
            return el;
          }

          function createSelect(f, multiple) {
            const el = document.createElement("select");
            el.className = "w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 transition-colors";
            if (multiple) el.multiple = true;
            
            // Add default option
            if (!multiple && !f.mandatory) {
              const defaultOpt = document.createElement("option");
              defaultOpt.value = "";
              defaultOpt.textContent = "-- Please select --";
              el.appendChild(defaultOpt);
            }
            
            // Add options from lookups
            (f.lookups || "").split("|").filter(Boolean).forEach(v => {
              const opt = document.createElement("option");
              opt.value = v;
              opt.textContent = v;
              el.appendChild(opt);
            });
            return el;
          }

          function createRadios(f) {
            const wrap = document.createElement("div");
            wrap.className = "flex flex-wrap gap-4";
            (f.lookups || "").split("|").filter(Boolean).forEach(v => {
              const lbl = document.createElement("label");
              lbl.className = "inline-flex items-center gap-2 cursor-pointer";
              const inp = document.createElement("input");
              inp.type = "radio";
              inp.name = f.name;
              inp.value = v;
              inp.className = "text-purple-600 focus:ring-purple-500";
              lbl.appendChild(inp);
              lbl.appendChild(document.createTextNode(v));
              wrap.appendChild(lbl);
            });
            return wrap;
          }

          function createCheckbox(f) {
            const lbl = document.createElement("label");
            lbl.className = "inline-flex items-center gap-2 cursor-pointer";
            const inp = document.createElement("input");
            inp.type = "checkbox";
            inp.className = "rounded text-purple-600 focus:ring-purple-500";
            lbl.appendChild(inp);
            lbl.appendChild(document.createTextNode(f.label || "Yes"));
            inp.addEventListener("change", () => {
              inp.value = inp.checked ? "on" : "";
            });
            return lbl;
          }

          function createGDPR(f) {
            const wrap = document.createElement("div");
            wrap.className = "bg-gray-50 rounded-lg p-4";
            
            const lbl = document.createElement("label");
            lbl.className = "flex items-start gap-3 cursor-pointer";
            
            const inp = document.createElement("input");
            inp.type = "checkbox";
            inp.name = f.name;
            inp.className = "mt-1 rounded text-purple-600 focus:ring-purple-500";
            inp.required = true;
            
            const text = document.createElement("span");
            text.className = "text-sm text-gray-700";
            text.innerHTML = f.label || "I consent to the processing of my data";
            
            lbl.appendChild(inp);
            lbl.appendChild(text);
            wrap.appendChild(lbl);
            
            return wrap;
          }

          function createHTMLNote(f) {
            const div = document.createElement("div");
            div.className = "col-span-full bg-gray-50 rounded-lg p-4";
            div.innerHTML = f.label || f.tooltip || "";
            return div;
          }

          function renderField(f) {
            // Skip if no type or not a form field
            if (!f.type || !typeMap[f.type]) return null;
            
            const node = tpl.content.cloneNode(true);
            const label = node.querySelector("label");
            const holder = node.querySelector(".field-container");
            const help = node.querySelector("p");
            
            // Set label
            label.textContent = f.label || f.name;
            if (f.mandatory) {
              const req = document.createElement("span");
              req.className = "text-red-500 ml-1";
              req.textContent = "*";
              label.appendChild(req);
            }
            
            // Create control
            const control = typeMap[f.type](f);
            
            // Set name and required
            if (f.type !== "RADIO" && control.name !== f.name) {
              control.name = f.name;
            }
            if (f.mandatory && (control.tagName === "INPUT" || control.tagName === "SELECT" || control.tagName === "TEXTAREA")) {
              control.required = true;
              control.setAttribute("aria-required", "true");
            }
            
            // Add to container
            holder.appendChild(control);
            
            // Set help text
            if (f.tooltip) {
              help.textContent = f.tooltip;
              const helpId = `help-${f.name}`;
              help.id = helpId;
              if (control.setAttribute) {
                control.setAttribute("aria-describedby", helpId);
              }
            } else {
              help.remove();
            }
            
            return node;
          }

          async function fetchWithRetry(url, maxRetries = 3) {
            let lastError;
            
            for (let i = 0; i < maxRetries; i++) {
              try {
                const response = await fetch(url);
                if (response.ok) return response;
                lastError = new Error(`HTTP ${response.status}`);
              } catch (error) {
                lastError = error;
              }
              
              // Exponential backoff
              if (i < maxRetries - 1) {
                await new Promise(r => setTimeout(r, Math.pow(2, i) * 1000));
              }
            }
            
            throw lastError;
          }

          async function init() {
            try {
              const schemaUrl = `/api/asm/form-schema?formid=${encodeURIComponent(formid)}`;
              const response = await fetchWithRetry(schemaUrl);
              const data = await response.json();
              
              // Clear loading skeleton
              container.innerHTML = "";
              
              // Render fields
              (data.fields || []).forEach(f => {
                const field = renderField(f);
                if (field) {
                  container.appendChild(field);
                }
              });
              
              // Enable submit button
              submitBtn.disabled = false;
              
            } catch (error) {
              console.error('Failed to load form:', error);
              container.innerHTML = `
                <div class="col-span-full">
                  <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
                    <div class="text-red-600 mb-4">
                      <svg class="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                    </div>
                    <p class="text-red-800 font-medium mb-2">Unable to load form</p>
                    <p class="text-sm text-red-600 mb-4">Please try again or contact us directly.</p>
                    <a href="https://service.sheltermanager.com/asmservice?account=${account}&method=online_form_html&formid=${formid}" 
                       class="inline-block px-6 py-2 bg-red-100 hover:bg-red-200 text-red-800 rounded-lg font-medium transition-colors"
                       target="_blank">
                      Open Form in New Window
                    </a>
                  </div>
                </div>
              `;
            }
          }

          // Initialize when DOM is ready
          if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', init);
          } else {
            init();
          }
        </script>
      </>
    ) : (
      <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
        <p class="text-red-800 font-medium mb-2">Form Configuration Missing</p>
        <p class="text-sm text-red-600">Please set PUBLIC_ASM_ACCOUNT in environment variables.</p>
      </div>
    )}

    <div class="mt-8 text-center">
      <p class="text-sm text-gray-500">
        Having trouble? <a href="/contact-us" class="text-purple-600 hover:text-purple-700 underline">Contact us directly</a>
      </p>
    </div>
  </div>
</Base>