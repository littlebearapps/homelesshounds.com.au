---
export interface Props {
  petId: string;
  petName: string;
  petBreed: string;
  petSpecies: string;
  petAge: string;
  petSex: string;
  petSize: string;
  formId: string;
}

const { petId, petName, petBreed, petSpecies, petAge, petSex, petSize, formId } = Astro.props;
const TURNSTILE_SITE_KEY = import.meta.env.PUBLIC_TURNSTILE_SITE_KEY || '';
---

<!-- Modal Backdrop -->
<div id="adoption-modal" class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm z-50 hidden">
  <div class="flex items-center justify-center min-h-screen p-4">
    <!-- Modal Content -->
    <div class="bg-white rounded-2xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden">
      <!-- Modal Header -->
      <div class="flex items-center justify-between p-6 border-b border-gray-200 bg-gradient-to-r from-indigo-50 to-pink-50">
        <div class="flex items-center">
          <div class="relative mr-4">
            <img 
              src={`https://service.sheltermanager.com/asmservice?account=st3418&method=animal_thumbnail&animalid=${petId}`}
              alt={`${petName} - ${petBreed} ${petSpecies}`}
              class="w-16 h-16 object-cover rounded-full border-3 border-white shadow-lg"
              loading="eager"
            />
            <div class="absolute -bottom-1 -right-1 w-6 h-6 bg-white rounded-full flex items-center justify-center shadow-sm border border-gray-200">
              <span class="text-sm">{petSpecies.toLowerCase() === 'dog' ? 'üêï' : 'üê±'}</span>
            </div>
          </div>
          <div>
            <h2 class="text-2xl font-bold text-gray-900">Apply to Adopt {petName}</h2>
            <p class="text-gray-600">{petBreed} ‚Ä¢ {petAge} ‚Ä¢ {petSex} ‚Ä¢ {petSize}</p>
          </div>
        </div>
        <div class="flex items-center space-x-2">
          <button 
            id="clear-form-btn"
            class="px-3 py-1.5 text-sm bg-gray-100 hover:bg-gray-200 text-gray-600 rounded-lg font-medium transition-colors"
            title="Clear form and start fresh"
          >
            Clear Form
          </button>
          <button 
            id="close-modal-btn"
            class="p-2 hover:bg-gray-100 rounded-full transition-colors"
            title="Close (progress will be saved)"
          >
            <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      </div>

      <!-- Modal Body -->
      <div class="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
        <!-- Session Save Notice -->
        <div id="session-notice" class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6 hidden">
          <div class="flex items-center">
            <svg class="w-5 h-5 text-blue-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <p class="text-blue-800 text-sm">
              <strong>Progress Restored:</strong> Your previous application progress has been restored.
            </p>
          </div>
        </div>

        <form id="adoption-form" class="space-y-6" action="/api/submit" method="POST" enctype="multipart/form-data">
          <!-- Hidden Fields -->
          <input type="hidden" name="formid" value={formId} />
          <input type="hidden" name="pet_id" value={petId} />
          <input type="hidden" name="pet_name" value={petName} />
          <input type="hidden" name="pet_breed" value={petBreed} />
          <input type="hidden" name="pet_species" value={petSpecies} />
          
          <!-- Pet Information Display -->
          <div class="bg-gray-50 rounded-xl p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Application for:</h3>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
              <div>
                <span class="text-gray-500">Name:</span>
                <p class="font-medium text-gray-900">{petName}</p>
              </div>
              <div>
                <span class="text-gray-500">Breed:</span>
                <p class="font-medium text-gray-900">{petBreed}</p>
              </div>
              <div>
                <span class="text-gray-500">Age:</span>
                <p class="font-medium text-gray-900">{petAge}</p>
              </div>
              <div>
                <span class="text-gray-500">Size:</span>
                <p class="font-medium text-gray-900">{petSize}</p>
              </div>
            </div>
          </div>

          <!-- Form Header (Important Information) -->
          <div id="form-header" class="hidden bg-amber-50 border border-amber-200 rounded-xl p-6">
            <div class="flex items-start">
              <svg class="w-5 h-5 text-amber-600 mt-0.5 mr-3 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
              </svg>
              <div class="text-sm text-gray-700" id="form-header-content"></div>
            </div>
          </div>

          <!-- Auto-save Notice -->
          <div class="bg-green-50 border border-green-200 rounded-lg px-4 py-3 mb-6">
            <div class="flex items-center">
              <svg class="w-5 h-5 text-green-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
              </svg>
              <span class="text-sm text-green-800 font-medium">Your progress is automatically saved as you type.</span>
            </div>
          </div>

          <!-- Dynamic form fields will be inserted here -->
          <div id="adoption-fields" class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Loading skeleton -->
            <div class="col-span-full animate-pulse">
              <div class="h-10 bg-gray-200 rounded mb-4"></div>
              <div class="h-10 bg-gray-200 rounded mb-4"></div>
              <div class="h-32 bg-gray-200 rounded mb-4"></div>
              <div class="h-10 bg-gray-200 rounded w-32"></div>
            </div>
          </div>

          <!-- Form Footer (Terms & Conditions) -->
          <div id="form-footer" class="hidden col-span-full bg-red-50 border border-red-200 rounded-xl p-6">
            <div class="flex items-start">
              <svg class="w-5 h-5 text-red-600 mt-0.5 mr-3 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9C9 5 9 5.672 9 6.5S9 8 10 8s1-.672 1-1.5S11 5 10 5z" clip-rule="evenodd"></path>
              </svg>
              <div class="text-sm text-gray-700 font-medium" id="form-footer-content"></div>
            </div>
          </div>

          <!-- Turnstile widget -->
          {TURNSTILE_SITE_KEY && TURNSTILE_SITE_KEY !== '' && (
            <div class="pt-4 border-t border-gray-200">
              <div class="cf-turnstile" data-sitekey={TURNSTILE_SITE_KEY}></div>
            </div>
          )}

          <!-- Submit button -->
          <div class="pt-6 border-t border-gray-200 flex justify-between items-center">
            <p class="text-sm text-gray-600">
              Your progress is automatically saved as you type.
            </p>
            <button 
              type="submit" 
              id="adoption-submit-btn"
              disabled
              class="px-8 py-3 rounded-xl bg-gradient-to-r from-indigo-700 to-pink-600 text-white font-semibold hover:from-indigo-800 hover:to-pink-700 transition-all shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Submit Adoption Application
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Field template for JavaScript (same as surrender form) -->
<template id="adoption-field-tpl">
  <div class="flex flex-col gap-2">
    <label class="text-sm font-medium text-gray-700"></label>
    <div class="field-container w-full"></div>
    <p class="text-xs text-gray-500"></p>
    <p class="error-message text-xs text-red-600 hidden"></p>
  </div>
</template>

<!-- Load Turnstile -->
{TURNSTILE_SITE_KEY && TURNSTILE_SITE_KEY !== '' && (
  <script src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>
)}

<!-- Modal JavaScript -->
<script type="module" define:vars={{ petId, petName, petBreed, petSpecies, formId }}>
  // Modal elements
  const modal = document.getElementById('adoption-modal');
  const openBtn = document.getElementById('apply-adopt-btn');
  const closeBtn = document.getElementById('close-modal-btn');
  const clearBtn = document.getElementById('clear-form-btn');
  const form = document.getElementById('adoption-form');
  const container = document.getElementById('adoption-fields');
  const tpl = document.getElementById('adoption-field-tpl');
  const submitBtn = document.getElementById('adoption-submit-btn');
  const sessionNotice = document.getElementById('session-notice');

  // Session storage keys
  const STORAGE_KEY = `adoption_form_${petId}`;
  const TIMESTAMP_KEY = `adoption_form_timestamp_${petId}`;
  
  // Field type mappings (same as surrender form)
  const typeMap = {
    TEXT: () => createInput("text"),
    EMAIL: () => createInput("email"),
    NUMBER: () => createInput("number"),
    TELEPHONE: () => createInput("tel"),
    TEXTAREA: () => createTextarea(),
    NOTES: () => createTextarea(),
    LOOKUP: (f) => createSelect(f, false),
    LOOKUP_MULTI: (f) => createSelect(f, true),
    "MULTI-LOOKUP": (f) => createSelect(f, true),
    RADIO: (f) => createRadios(f),
    RADIOGROUP: (f) => createRadioGroup(f),
    CHECKBOX: (f) => createCheckbox(f),
    YESNO: (f) => createYesNoSelect(f),
    DATE: () => createInput("date"),
    FILE: () => createFileInput(),
    GDPR: (f) => createGDPR(f),
    GDPR_CONTACT_OPTIN: (f) => createGDPROptIn(f),
    HTMLNOTE: (f) => createHTMLNote(f),
    SPECIES: () => createInput("text"),
    BREED: () => createInput("text"),
    ADOPTABLEANIMAL: (f) => createAdoptableAnimal(f),
    SIGNATURE: (f) => createSignature(f)
  };

  // Create form field functions (same as surrender form)
  function createInput(type) {
    const el = document.createElement("input");
    el.type = type;
    el.className = "w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-indigo-600 focus:ring-2 focus:ring-purple-200 transition-colors";
    return el;
  }

  function createTextarea() {
    const el = document.createElement("textarea");
    el.className = "w-full rounded-lg border border-gray-300 px-4 py-2 h-32 focus:border-indigo-600 focus:ring-2 focus:ring-purple-200 transition-colors";
    return el;
  }

  function createFileInput() {
    const el = document.createElement("input");
    el.type = "file";
    el.className = "w-full file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-800 hover:file:bg-indigo-200";
    el.accept = "image/*,.pdf,.doc,.docx";
    return el;
  }

  function createSelect(f, multiple) {
    const el = document.createElement("select");
    el.className = "w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-indigo-600 focus:ring-2 focus:ring-purple-200 transition-colors";
    if (multiple) el.multiple = true;
    
    if (!multiple && !f.mandatory) {
      const defaultOpt = document.createElement("option");
      defaultOpt.value = "";
      defaultOpt.textContent = "-- Please select --";
      el.appendChild(defaultOpt);
    }
    
    (f.lookups || "").split("|").filter(Boolean).forEach(v => {
      const opt = document.createElement("option");
      opt.value = v;
      opt.textContent = v;
      el.appendChild(opt);
    });
    return el;
  }

  function createRadios(f) {
    const wrap = document.createElement("div");
    wrap.className = "flex flex-wrap gap-4";
    (f.lookups || "").split("|").filter(Boolean).forEach(v => {
      const lbl = document.createElement("label");
      lbl.className = "inline-flex items-center gap-2 cursor-pointer";
      const inp = document.createElement("input");
      inp.type = "radio";
      inp.name = f.name;
      inp.value = v;
      inp.className = "text-indigo-700 focus:ring-indigo-600";
      lbl.appendChild(inp);
      lbl.appendChild(document.createTextNode(v));
      wrap.appendChild(lbl);
    });
    return wrap;
  }

  function createYesNoSelect(f) {
    const el = document.createElement("select");
    el.className = "w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-indigo-600 focus:ring-2 focus:ring-purple-200 transition-colors";
    
    if (!f.mandatory) {
      const defaultOpt = document.createElement("option");
      defaultOpt.value = "";
      defaultOpt.textContent = "-- Please select --";
      el.appendChild(defaultOpt);
    }
    
    ["No", "Yes"].forEach(v => {
      const opt = document.createElement("option");
      opt.value = v;
      opt.textContent = v;
      el.appendChild(opt);
    });
    return el;
  }

  function createHTMLNote(f) {
    const div = document.createElement("div");
    div.className = "col-span-full bg-gray-50 rounded-lg p-4";
    div.innerHTML = f.label || f.tooltip || "";
    return div;
  }

  function createCheckbox(f) {
    const lbl = document.createElement("label");
    lbl.className = "inline-flex items-center gap-2 cursor-pointer";
    const inp = document.createElement("input");
    inp.type = "checkbox";
    inp.className = "rounded text-indigo-700 focus:ring-indigo-600";
    lbl.appendChild(inp);
    lbl.appendChild(document.createTextNode(f.label || "Yes"));
    inp.addEventListener("change", () => {
      inp.value = inp.checked ? "on" : "";
    });
    return lbl;
  }

  function createGDPR(f) {
    const wrap = document.createElement("div");
    wrap.className = "bg-gray-50 rounded-lg p-4";

    const lbl = document.createElement("label");
    lbl.className = "flex items-start gap-3 cursor-pointer";

    const inp = document.createElement("input");
    inp.type = "checkbox";
    inp.name = f.name;
    inp.className = "mt-1 rounded text-indigo-700 focus:ring-indigo-600";
    inp.required = true;

    const text = document.createElement("span");
    text.className = "text-sm text-gray-700";
    text.innerHTML = f.label || "I consent to the processing of my data";

    lbl.appendChild(inp);
    lbl.appendChild(text);
    wrap.appendChild(lbl);

    return wrap;
  }

  function createRadioGroup(f) {
    const wrap = document.createElement("div");
    wrap.className = "flex flex-col gap-2";
    (f.lookups || "").split("|").filter(Boolean).forEach((v, idx) => {
      const lbl = document.createElement("label");
      lbl.className = "flex items-center gap-2 p-2 rounded-lg hover:bg-gray-50 cursor-pointer";
      const inp = document.createElement("input");
      inp.type = "radio";
      inp.name = f.name;
      inp.value = v;
      inp.className = "text-indigo-700 focus:ring-indigo-600";
      if (idx === 0 && f.mandatory) inp.required = true;
      const span = document.createElement("span");
      span.textContent = v;
      lbl.appendChild(inp);
      lbl.appendChild(span);
      wrap.appendChild(lbl);
    });
    return wrap;
  }

  function createAdoptableAnimal(f) {
    const el = document.createElement("input");
    el.type = "text";
    el.className = "w-full rounded-lg border border-gray-300 px-4 py-2 focus:border-indigo-600 focus:ring-2 focus:ring-purple-200 transition-colors";
    el.placeholder = "Enter animal name or ID";

    // Pre-fill with the pet name if available
    if (typeof petName !== 'undefined') {
      el.value = petName;
    }

    return el;
  }

  function createSignature(f) {
    const wrap = document.createElement("div");
    wrap.className = "bg-gray-50 rounded-lg p-4";

    const canvas = document.createElement("canvas");
    canvas.width = 400;
    canvas.height = 150;
    canvas.className = "border border-gray-300 rounded-lg bg-white w-full";
    canvas.style.touchAction = "none";

    const input = document.createElement("input");
    input.type = "hidden";
    input.name = f.name;

    const clearBtn = document.createElement("button");
    clearBtn.type = "button";
    clearBtn.className = "mt-2 px-4 py-2 text-sm bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-lg transition-colors";
    clearBtn.textContent = "Clear Signature";

    let isDrawing = false;
    const ctx = canvas.getContext("2d");
    ctx.strokeStyle = "#1e40af";
    ctx.lineWidth = 2;
    ctx.lineCap = "round";

    function getCoords(e) {
      const rect = canvas.getBoundingClientRect();
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const clientY = e.touches ? e.touches[0].clientY : e.clientY;
      return {
        x: clientX - rect.left,
        y: clientY - rect.top
      };
    }

    function startDrawing(e) {
      isDrawing = true;
      const coords = getCoords(e);
      ctx.beginPath();
      ctx.moveTo(coords.x, coords.y);
      e.preventDefault();
    }

    function draw(e) {
      if (!isDrawing) return;
      const coords = getCoords(e);
      ctx.lineTo(coords.x, coords.y);
      ctx.stroke();
      input.value = canvas.toDataURL();
      e.preventDefault();
    }

    function stopDrawing(e) {
      isDrawing = false;
      e.preventDefault();
    }

    canvas.addEventListener("mousedown", startDrawing);
    canvas.addEventListener("mousemove", draw);
    canvas.addEventListener("mouseup", stopDrawing);
    canvas.addEventListener("mouseout", stopDrawing);

    canvas.addEventListener("touchstart", startDrawing);
    canvas.addEventListener("touchmove", draw);
    canvas.addEventListener("touchend", stopDrawing);

    clearBtn.addEventListener("click", () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      input.value = "";
    });

    wrap.appendChild(canvas);
    wrap.appendChild(clearBtn);
    wrap.appendChild(input);

    return wrap;
  }

  function createGDPROptIn(f) {
    const wrap = document.createElement("div");
    wrap.className = "bg-blue-50 rounded-lg p-4";

    const lbl = document.createElement("label");
    lbl.className = "flex items-start gap-3 cursor-pointer";

    const inp = document.createElement("input");
    inp.type = "checkbox";
    inp.name = f.name;
    inp.className = "mt-1 rounded text-indigo-700 focus:ring-indigo-600";
    inp.required = f.mandatory || false;

    const text = document.createElement("span");
    text.className = "text-sm text-gray-700";
    text.innerHTML = f.label || "I agree to receive updates (opt out anytime)";

    lbl.appendChild(inp);
    lbl.appendChild(text);
    wrap.appendChild(lbl);

    return wrap;
  }

  function renderField(f) {
    if (!f.type || !typeMap[f.type]) return null;
    
    const node = tpl.content.cloneNode(true);
    const label = node.querySelector("label");
    const holder = node.querySelector(".field-container");
    const help = node.querySelector("p");
    
    label.textContent = f.label || f.name;
    if (f.mandatory) {
      const req = document.createElement("span");
      req.className = "text-red-500 ml-1";
      req.textContent = "*";
      label.appendChild(req);
    }
    
    const control = typeMap[f.type](f);
    
    if (f.type !== "RADIO" && control.name !== f.name) {
      control.name = f.name;
    }
    if (f.mandatory && (control.tagName === "INPUT" || control.tagName === "SELECT" || control.tagName === "TEXTAREA")) {
      control.required = true;
      control.setAttribute("aria-required", "true");
    }
    
    // Add auto-save listener
    if (control.tagName === "INPUT" || control.tagName === "SELECT" || control.tagName === "TEXTAREA") {
      control.addEventListener("input", saveFormData);
      control.addEventListener("change", saveFormData);
    }
    
    holder.appendChild(control);
    
    if (f.tooltip) {
      help.textContent = f.tooltip;
      const helpId = `help-${f.name}`;
      help.id = helpId;
      if (control.setAttribute) {
        control.setAttribute("aria-describedby", helpId);
      }
    } else {
      help.remove();
    }
    
    return node;
  }

  // Session storage functions
  function saveFormData() {
    const formData = new FormData(form);
    const data = {};
    for (let [key, value] of formData.entries()) {
      data[key] = value;
    }
    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));
    localStorage.setItem(TIMESTAMP_KEY, Date.now().toString());
  }

  function loadFormData() {
    try {
      const saved = localStorage.getItem(STORAGE_KEY);
      const timestamp = localStorage.getItem(TIMESTAMP_KEY);
      
      if (saved && timestamp) {
        const data = JSON.parse(saved);
        const savedTime = parseInt(timestamp);
        const now = Date.now();
        
        // Show data if saved within last 7 days
        if (now - savedTime < 7 * 24 * 60 * 60 * 1000) {
          Object.entries(data).forEach(([key, value]) => {
            const field = form.querySelector(`[name="${key}"]`);
            if (field) {
              if (field.type === 'checkbox') {
                field.checked = value === 'on';
              } else {
                field.value = value;
              }
            }
          });
          
          // Show notice
          sessionNotice.classList.remove('hidden');
          setTimeout(() => sessionNotice.classList.add('hidden'), 5000);
          
          return true;
        }
      }
    } catch (e) {
      console.error('Error loading form data:', e);
    }
    return false;
  }

  function clearFormData() {
    localStorage.removeItem(STORAGE_KEY);
    localStorage.removeItem(TIMESTAMP_KEY);
    form.reset();
    sessionNotice.classList.add('hidden');
  }

  // Modal functions
  function openModal() {
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  }

  function closeModal() {
    modal.classList.add('hidden');
    document.body.style.overflow = 'auto';
  }

  // Initialize form
  async function initForm() {
    try {
      const schemaUrl = `/api/asm/form-schema?formid=${formId}`;
      const response = await fetch(schemaUrl);
      const data = await response.json();

      // Display form header if available
      const headerEl = document.getElementById('form-header');
      const headerContent = document.getElementById('form-header-content');
      // Use 'header' field first, fallback to 'description' for backward compatibility
      const headerText = data.header || data.description;
      if (headerText && headerText.trim()) {
        // Convert plain text to HTML with line breaks
        headerContent.innerHTML = headerText.replace(/\n/g, '<br>').replace(/- /g, '‚Ä¢ ');
        headerEl.classList.remove('hidden');
      }

      // Display form footer if available
      const footerEl = document.getElementById('form-footer');
      const footerContent = document.getElementById('form-footer-content');
      if (data.footer && data.footer.trim()) {
        footerContent.innerHTML = data.footer;
        footerEl.classList.remove('hidden');
      }

      container.innerHTML = "";

      // Group fields into sections for better UX
      const sections = {
        'personal': {
          title: 'üë§ Your Details',
          fields: [],
          indices: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] // Covers personal info fields
        },
        'household': {
          title: 'üè† Your Household & Lifestyle',
          fields: [],
          indices: [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24] // Household questions
        },
        'experience': {
          title: 'üêæ Pet Experience',
          fields: [],
          indices: [25, 26, 27, 28, 29, 30, 31, 32, 33] // Pet experience questions
        },
        'environment': {
          title: 'üè° Your Environment',
          fields: [],
          indices: [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44] // Environment & training
        },
        'final': {
          title: '‚úÖ Final Details',
          fields: [],
          indices: [45, 46, 47, 48, 49, 50] // Citizenship, consent, signature
        }
      };

      // Categorize fields into sections
      const fields = data.fields || [];
      fields.forEach(f => {
        // Skip section header fields (they're just text labels)
        if (f.type === 'TEXT' && (f.label.includes('Your Details') || f.label.includes('Questions'))) {
          return;
        }

        // Find which section this field belongs to
        let placed = false;
        for (const [key, section] of Object.entries(sections)) {
          if (section.indices.includes(f.index)) {
            section.fields.push(f);
            placed = true;
            break;
          }
        }

        // If not placed in a section, add to the most appropriate one
        if (!placed) {
          if (f.index <= 12) sections.personal.fields.push(f);
          else if (f.index <= 24) sections.household.fields.push(f);
          else if (f.index <= 33) sections.experience.fields.push(f);
          else if (f.index <= 44) sections.environment.fields.push(f);
          else sections.final.fields.push(f);
        }
      });

      // Render sections with fields
      Object.entries(sections).forEach(([key, section]) => {
        if (section.fields.length === 0) return;

        // Create section container
        const sectionDiv = document.createElement('div');
        sectionDiv.className = 'col-span-full';

        // Add section header
        const headerDiv = document.createElement('div');
        headerDiv.className = 'mb-6 pb-3 border-b-2 border-gray-200';
        headerDiv.innerHTML = `
          <h3 class="text-lg font-semibold text-gray-900 flex items-center gap-2">
            ${section.title}
          </h3>
        `;
        sectionDiv.appendChild(headerDiv);

        // Create fields container
        const fieldsContainer = document.createElement('div');
        fieldsContainer.className = 'grid grid-cols-1 md:grid-cols-2 gap-6';

        // Add fields to section
        section.fields.forEach(f => {
          const field = renderField(f);
          if (field) {
            // Make some fields full-width (like textareas and special fields)
            if (f.type === 'NOTES' || f.type === 'TEXTAREA' || f.type === 'SIGNATURE' ||
                f.type === 'GDPR' || f.type === 'GDPR_CONTACT_OPTIN' || f.type === 'HTMLNOTE') {
              field.querySelector('div').classList.add('col-span-full');
            }
            fieldsContainer.appendChild(field);
          }
        });

        sectionDiv.appendChild(fieldsContainer);
        container.appendChild(sectionDiv);

        // Add spacing between sections
        if (key !== 'final') {
          const spacer = document.createElement('div');
          spacer.className = 'col-span-full h-6';
          container.appendChild(spacer);
        }
      });

      submitBtn.disabled = false;
      
      // Load saved data if available
      loadFormData();
      
    } catch (error) {
      console.error('Failed to load adoption form:', error);
      container.innerHTML = `
        <div class="col-span-full">
          <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
            <p class="text-red-800 font-medium mb-2">Unable to load form</p>
            <p class="text-sm text-red-600">Please try again or contact us directly.</p>
          </div>
        </div>
      `;
    }
  }

  // Event listeners
  if (openBtn) {
    openBtn.addEventListener('click', (e) => {
      e.preventDefault();
      openModal();
      if (container.innerHTML.includes('animate-pulse')) {
        initForm();
      }
    });
  }

  closeBtn?.addEventListener('click', closeModal);
  clearBtn?.addEventListener('click', clearFormData);

  // Close modal when clicking backdrop
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeModal();
    }
  });

  // Close modal with Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
      closeModal();
    }
  });
</script>