---
import type { AnimalFilters as FilterTypes } from '../types/asm';

interface Props {
  currentFilters?: {
    species?: string;
    agegroup?: string;
    size?: string;
    sex?: string;
    goodWith?: string;
    hasSpecialNeeds?: string;
    isHouseTrained?: string;
    hasActiveReserve?: string;
  };
  showSpeciesFilter?: boolean;
}

const { currentFilters = {}, showSpeciesFilter = true } = Astro.props;
---

<div class="bg-white rounded-xl border border-gray-200 p-6 mb-8">
  <h2 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">
    <svg class="w-5 h-5 mr-2 text-indigo-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.707A1 1 0 013 7V4z" />
    </svg>
    Filter Animals
  </h2>
  
  <form id="animal-filters" class="space-y-6">
    <!-- Primary Filters Row -->
    <div class="flex flex-wrap gap-4">
      {showSpeciesFilter && (
        <div class="flex-1 min-w-32">
          <label for="species-filter" class="sr-only">Species</label>
          <select 
            id="species-filter" 
            name="species"
            class="filter-select w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-600 focus:border-transparent"
          >
            <option value="">All Animals</option>
            <option value="dog" selected={currentFilters.species === 'dog'}>🐕 Dogs</option>
            <option value="cat" selected={currentFilters.species === 'cat'}>🐱 Cats</option>
          </select>
        </div>
      )}
      
      <div class="flex-1 min-w-32">
        <label for="agegroup-filter" class="sr-only">Age Group</label>
        <select 
          id="agegroup-filter" 
          name="agegroup"
          class="filter-select w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-600 focus:border-transparent"
        >
          <option value="">🎂 Any Age</option>
          <option value="Young" selected={currentFilters.agegroup === 'Young'}>🐶 Young</option>
          <option value="Adult" selected={currentFilters.agegroup === 'Adult'}>🐕 Adult</option>
          <option value="Senior" selected={currentFilters.agegroup === 'Senior'}>👴 Senior</option>
        </select>
      </div>
      
      <div class="flex-1 min-w-32">
        <label for="size-filter" class="sr-only">Size</label>
        <select 
          id="size-filter" 
          name="size"
          class="filter-select w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-600 focus:border-transparent"
        >
          <option value="">📏 Any Size</option>
          <option value="Small" selected={currentFilters.size === 'Small'}>🐩 Small</option>
          <option value="Medium" selected={currentFilters.size === 'Medium'}>🐕 Medium</option>
          <option value="Large" selected={currentFilters.size === 'Large'}>🦮 Large</option>
          <option value="Very Large" selected={currentFilters.size === 'Very Large'}>🐕‍🦺 Very Large</option>
        </select>
      </div>
      
      <div class="flex-1 min-w-32">
        <label for="sex-filter" class="sr-only">Sex</label>
        <select 
          id="sex-filter" 
          name="sex"
          class="filter-select w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-600 focus:border-transparent"
        >
          <option value="">⚧ Any Sex</option>
          <option value="Male" selected={currentFilters.sex === 'Male'}>♂️ Male</option>
          <option value="Female" selected={currentFilters.sex === 'Female'}>♀️ Female</option>
        </select>
      </div>
    </div>

    <!-- Enhanced Compatibility Filters -->
    <div>
      <h3 class="text-sm font-semibold text-gray-700 mb-3 flex items-center">
        <svg class="w-4 h-4 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
        </svg>
        Compatibility & Special Requirements
      </h3>
      <div class="flex flex-wrap gap-4">
        <div class="flex-1 min-w-32">
          <label for="specialneeds-filter" class="sr-only">Special Needs</label>
          <select 
            id="specialneeds-filter" 
            name="hasSpecialNeeds"
            class="filter-select w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-600 focus:border-transparent"
          >
            <option value="">💝 Any Needs</option>
            <option value="yes" selected={currentFilters.hasSpecialNeeds === 'yes'}>💖 Special Needs</option>
            <option value="no" selected={currentFilters.hasSpecialNeeds === 'no'}>✨ No Special Needs</option>
          </select>
        </div>

        <div class="flex-1 min-w-32">
          <label for="reserved-filter" class="sr-only">Availability</label>
          <select 
            id="reserved-filter" 
            name="hasActiveReserve"
            class="filter-select w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-600 focus:border-transparent"
          >
            <option value="">🏷️ All Animals</option>
            <option value="no" selected={currentFilters.hasActiveReserve === 'no'}>✅ Available Now</option>
            <option value="yes" selected={currentFilters.hasActiveReserve === 'yes'}>🔒 Reserved</option>
          </select>
        </div>
      </div>

      <!-- Good With Toggle Buttons -->
      <div class="mt-4">
        <h4 class="text-sm font-medium text-gray-700 mb-3">Good With / Training</h4>
        <div class="flex flex-wrap gap-2">
          <button type="button" class="good-with-toggle" data-value="cats">
            🐱 Good with Cats
          </button>
          <button type="button" class="good-with-toggle" data-value="dogs">
            🐕 Good with Dogs
          </button>
          <button type="button" class="good-with-toggle" data-value="children">
            👶 Good with Children
          </button>
          <button type="button" class="good-with-toggle" data-value="smallanimals">
            🐰 Good with Small Animals
          </button>
          <button type="button" class="good-with-toggle" data-value="housetrained">
            🏠 House Trained
          </button>
          <button type="button" class="good-with-toggle" data-value="elderly">
            👴 Good with Elderly
          </button>
          <button type="button" class="good-with-toggle" data-value="crate">
            📦 Crate Trained
          </button>
          <button type="button" class="good-with-toggle" data-value="travel">
            🚗 Travel Friendly
          </button>
          <button type="button" class="good-with-toggle" data-value="lead">
            🦮 Good on Lead
          </button>
        </div>
        <!-- Hidden inputs for form submission -->
        <div id="goodwith-inputs" class="hidden"></div>
      </div>
    </div>

    <!-- Sort and Actions Row -->
    <div class="flex flex-wrap gap-4 items-center justify-between pt-4 border-t border-gray-200">
      <div class="flex gap-4">
        <div class="min-w-48">
          <label for="sort-filter" class="sr-only">Sort By</label>
          <select 
            id="sort-filter" 
            name="sort"
            class="filter-select w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-600 focus:border-transparent"
          >
            <option value="name">📝 Name A-Z</option>
            <option value="-name">📝 Name Z-A</option>
            <option value="age">👶 Youngest First</option>
            <option value="-age">🧓 Oldest First</option>
            <option value="-daysonshelter">⏰ Longest in Care</option>
            <option value="daysonshelter">✨ Newest Arrivals</option>
          </select>
        </div>
      </div>

      <!-- Action Buttons -->
      <div class="flex gap-3">
        <button 
          type="button" 
          id="clear-filters"
          class="px-4 py-2 text-gray-600 hover:text-gray-800 font-medium transition-colors duration-200 flex items-center bg-gray-50 hover:bg-gray-100 rounded-lg"
        >
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
          Clear All
        </button>

        <button 
          type="button" 
          id="toggle-advanced"
          class="px-4 py-2 text-indigo-700 hover:text-indigo-800 font-medium transition-colors duration-200 flex items-center"
        >
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" />
          </svg>
          <span id="advanced-toggle-text">Simple View</span>
        </button>
      </div>
    </div>
  </form>
</div>

<script>
  // Client-side filtering functionality
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('animal-filters');
    const clearButton = document.getElementById('clear-filters');
    
    if (!form || !clearButton) return;
    
    // Filter change handler
    function handleFilterChange() {
      const formData = new FormData(form);
      const params = new URLSearchParams();

      // Handle multiple goodWith checkboxes
      const goodWithValues = formData.getAll('goodWith');

      // Build query parameters
      for (const [key, value] of formData.entries()) {
        if (key === 'goodWith') continue; // Handle separately
        if (value && value !== '') {
          params.set(key, value);
        }
      }

      // Add all goodWith values
      if (goodWithValues.length > 0) {
        params.set('goodWith', goodWithValues.join(','));
      }

      // Update URL without page reload
      const newUrl = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
      window.history.replaceState({}, '', newUrl);

      // Apply filters to visible animals
      const filters = Object.fromEntries(params);
      if (goodWithValues.length > 0) {
        filters.goodWithArray = goodWithValues;
      }
      filterAnimals(filters);
    }
    
    // Clear filters handler
    function clearFilters() {
      form.reset();

      // Clear toggle buttons
      document.querySelectorAll('.good-with-toggle').forEach(button => {
        button.classList.remove('active');
      });

      // Clear hidden inputs
      const hiddenInputsContainer = document.getElementById('goodwith-inputs');
      hiddenInputsContainer.innerHTML = '';

      window.history.replaceState({}, '', window.location.pathname);
      filterAnimals({});
    }
    
    // Apply filters to animal cards
    function filterAnimals(filters) {
      const animals = document.querySelectorAll('.asm3-adoptable-item');
      let visibleCount = 0;

      animals.forEach(animal => {
        let shouldShow = true;
        const link = animal.querySelector('a');
        const href = link?.getAttribute('href') || '';

        // Extract animal info from the card
        const nameEl = animal.querySelector('.asm3-adoptable-name');
        const taglineEl = animal.querySelector('.asm3-adoptable-tagline');

        // Get all badge elements from both compatibility and status sections
        const allBadges = animal.querySelectorAll('span[class*="bg-"][class*="text-"]');
        const badgeTexts = Array.from(allBadges).map(badge => badge.textContent?.toLowerCase() || '');
        const badges = badgeTexts.join(' ');

        if (!nameEl || !taglineEl) return;

        const name = nameEl.textContent?.toLowerCase() || '';
        const content = taglineEl.textContent?.toLowerCase() || '';

        // Species filter - check URL path
        if (filters.species && !href.includes(`/adopt/${filters.species}/`)) {
          shouldShow = false;
        }

        // Age group filter - check tagline content for age group
        if (filters.agegroup) {
          const ageLines = taglineEl.querySelectorAll('div');
          let hasAge = false;
          ageLines.forEach(line => {
            if (line.textContent?.toLowerCase().includes(filters.agegroup.toLowerCase())) {
              hasAge = true;
            }
          });
          if (!hasAge) {
            shouldShow = false;
          }
        }

        // Size filter - check tagline content for size
        if (filters.size) {
          const sizeLines = taglineEl.querySelectorAll('div');
          let hasSize = false;
          sizeLines.forEach(line => {
            if (line.textContent?.toLowerCase().includes(filters.size.toLowerCase())) {
              hasSize = true;
            }
          });
          if (!hasSize) {
            shouldShow = false;
          }
        }

        // Sex filter - check tagline content for sex
        if (filters.sex) {
          const sexLines = taglineEl.querySelectorAll('div');
          let hasSex = false;
          sexLines.forEach(line => {
            if (line.textContent?.toLowerCase().includes(filters.sex.toLowerCase())) {
              hasSex = true;
            }
          });
          if (!hasSex) {
            shouldShow = false;
          }
        }
        
        // Handle multiple goodWith selections
        if (filters.goodWithArray && filters.goodWithArray.length > 0) {
          const goodWithMap = {
            'cats': '🐱 cat friendly',
            'dogs': '🐕 dog friendly',
            'children': '👶 kid friendly',
            'smallanimals': '🐰 small animal friendly',
            'housetrained': '🏠 house trained',
            'elderly': 'elderly friendly',
            'crate': 'crate trained',
            'travel': 'travel friendly',
            'lead': 'good on lead'
          };

          // Animal must match ALL selected criteria (AND logic)
          const matches = filters.goodWithArray.every(criterion => {
            const searchTerm = goodWithMap[criterion];
            return searchTerm && badges.includes(searchTerm);
          });

          if (!matches) {
            shouldShow = false;
          }
        }


        // Special needs filter - check for special needs badge
        if (filters.hasSpecialNeeds === 'yes' && !badges.includes('special needs')) {
          shouldShow = false;
        }
        if (filters.hasSpecialNeeds === 'no' && badges.includes('special needs')) {
          shouldShow = false;
        }

        // Availability filter
        const isReserved = animal.querySelector('.asm3-adoptable-reserved');
        if (filters.hasActiveReserve === 'yes' && !isReserved) {
          shouldShow = false;
        }
        if (filters.hasActiveReserve === 'no' && isReserved) {
          shouldShow = false;
        }
        
        // Show/hide animal
        animal.style.display = shouldShow ? 'block' : 'none';
        if (shouldShow) visibleCount++;
      });

      // Update results count and toggle availability
      updateResultsCount(visibleCount);
      updateToggleAvailability();
    }
    
    // Update results counter and no results message
    function updateResultsCount(count) {
      let counter = document.getElementById('results-counter');
      let noResultsMessage = document.getElementById('no-results-message');
      const container = document.querySelector('.animals-grid')?.parentElement;

      if (!container) return;

      // Create counter if it doesn't exist
      if (!counter) {
        counter = document.createElement('div');
        counter.id = 'results-counter';
        counter.className = 'text-sm text-gray-600 mb-4';
        container.insertBefore(counter, container.querySelector('.animals-grid'));
      }

      // Create no results message if it doesn't exist
      if (!noResultsMessage) {
        noResultsMessage = document.createElement('div');
        noResultsMessage.id = 'no-results-message';
        noResultsMessage.className = 'text-center py-16 hidden';
        noResultsMessage.innerHTML = `
          <div class="bg-blue-50 border-2 border-blue-200 rounded-xl p-8 max-w-lg mx-auto">
            <div class="text-blue-600 mb-4">
              <svg class="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <h3 class="text-lg font-semibold text-blue-800 mb-2">No Animals Found</h3>
            <p class="text-blue-700 text-sm mb-4">We couldn't find any animals matching your current filters.</p>
            <p class="text-blue-600 text-xs mb-4">Try adjusting your search criteria:</p>
            <ul class="text-blue-600 text-xs text-left mb-4 space-y-1">
              <li>• Select fewer "Good With" requirements</li>
              <li>• Try different age groups or sizes</li>
              <li>• Check "Available Now" animals</li>
              <li>• Clear all filters to see all pets</li>
            </ul>
            <button
              onclick="document.getElementById('clear-filters').click()"
              class="px-4 py-2 bg-blue-100 hover:bg-blue-200 text-blue-800 rounded-lg font-medium transition-colors text-sm"
            >
              Clear All Filters
            </button>
          </div>
        `;
        const animalsGrid = container.querySelector('.animals-grid');
        if (animalsGrid) {
          container.insertBefore(noResultsMessage, animalsGrid.nextSibling);
        }
      }

      const total = document.querySelectorAll('.asm3-adoptable-item').length;

      if (count === 0) {
        counter.textContent = `No animals match your search criteria`;
        noResultsMessage.classList.remove('hidden');
        const animalsGrid = container.querySelector('.animals-grid');
        if (animalsGrid) animalsGrid.style.display = 'none';
      } else {
        counter.textContent = `Showing ${count} of ${total} animals`;
        noResultsMessage.classList.add('hidden');
        const animalsGrid = container.querySelector('.animals-grid');
        if (animalsGrid) animalsGrid.style.display = 'grid';
      }
    }
    
    // Advanced view toggle
    function toggleAdvancedView() {
      const advancedSection = document.querySelector('#animal-filters > div:nth-child(2)');
      const toggleButton = document.getElementById('toggle-advanced');
      const toggleText = document.getElementById('advanced-toggle-text');
      
      if (!advancedSection || !toggleButton || !toggleText) return;
      
      const isHidden = advancedSection.style.display === 'none';
      
      if (isHidden) {
        advancedSection.style.display = 'block';
        toggleText.textContent = 'Simple View';
      } else {
        advancedSection.style.display = 'none';
        toggleText.textContent = 'Advanced View';
      }
      
      // Store preference
      localStorage.setItem('animal-filters-advanced', isHidden ? 'true' : 'false');
    }

    // Load saved view preference
    function loadViewPreference() {
      const preference = localStorage.getItem('animal-filters-advanced');
      if (preference === 'false') {
        toggleAdvancedView();
      }
    }

    // Check which compatibility options are available in current animals
    function updateToggleAvailability() {
      const animals = document.querySelectorAll('.asm3-adoptable-item');
      const availableOptions = new Set();

      // Check what compatibility badges exist across all animals
      animals.forEach(animal => {
        if (animal.style.display === 'none') return; // Skip hidden animals

        const allBadges = animal.querySelectorAll('span[class*="bg-"][class*="text-"]');
        const badgeTexts = Array.from(allBadges).map(badge => badge.textContent?.toLowerCase() || '');

        badgeTexts.forEach(text => {
          if (text.includes('cat friendly')) availableOptions.add('cats');
          if (text.includes('dog friendly')) availableOptions.add('dogs');
          if (text.includes('kid friendly')) availableOptions.add('children');
          if (text.includes('small animal friendly')) availableOptions.add('smallanimals');
          if (text.includes('house trained')) availableOptions.add('housetrained');
          if (text.includes('elderly friendly') || text.includes('good with elderly')) availableOptions.add('elderly');
          if (text.includes('crate trained')) availableOptions.add('crate');
          if (text.includes('travel friendly')) availableOptions.add('travel');
          if (text.includes('good on lead') || text.includes('lead trained')) availableOptions.add('lead');
        });
      });

      // Update button states
      const toggleButtons = document.querySelectorAll('.good-with-toggle');
      toggleButtons.forEach(button => {
        const value = button.dataset.value;
        const isAvailable = availableOptions.has(value);

        if (isAvailable) {
          button.classList.remove('disabled');
          button.disabled = false;
        } else {
          button.classList.add('disabled');
          button.disabled = true;
          // Also deactivate if currently active
          if (button.classList.contains('active')) {
            button.classList.remove('active');
            const hiddenInputsContainer = document.getElementById('goodwith-inputs');
            const hiddenInput = hiddenInputsContainer.querySelector(`input[value="${value}"]`);
            if (hiddenInput) hiddenInput.remove();
          }
        }
      });
    }

    // Good With toggle button functionality
    function setupGoodWithToggles() {
      const toggleButtons = document.querySelectorAll('.good-with-toggle');
      const hiddenInputsContainer = document.getElementById('goodwith-inputs');

      toggleButtons.forEach(button => {
        button.addEventListener('click', function() {
          // Don't allow clicking disabled buttons
          if (this.disabled || this.classList.contains('disabled')) return;

          const value = this.dataset.value;
          const isActive = this.classList.contains('active');

          if (isActive) {
            // Deactivate
            this.classList.remove('active');
            // Remove hidden input
            const hiddenInput = hiddenInputsContainer.querySelector(`input[value="${value}"]`);
            if (hiddenInput) hiddenInput.remove();
          } else {
            // Activate
            this.classList.add('active');
            // Add hidden input
            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'goodWith';
            hiddenInput.value = value;
            hiddenInputsContainer.appendChild(hiddenInput);
          }

          // Trigger filter change
          handleFilterChange();
        });
      });
    }

    // Event listeners
    form.addEventListener('change', handleFilterChange);
    clearButton.addEventListener('click', clearFilters);

    const toggleButton = document.getElementById('toggle-advanced');
    if (toggleButton) {
      toggleButton.addEventListener('click', toggleAdvancedView);
    }

    // Initialize good with toggles
    setupGoodWithToggles();

    // Initialize view preference
    loadViewPreference();

    // Initial toggle availability check
    updateToggleAvailability();
    
    // Initialize filters from URL
    const urlParams = new URLSearchParams(window.location.search);
    const initialFilters = Object.fromEntries(urlParams);

    // Set form values from URL
    Object.entries(initialFilters).forEach(([key, value]) => {
      if (key === 'goodWith') {
        // Handle comma-separated goodWith values for toggle buttons
        const values = value.split(',');
        const hiddenInputsContainer = document.getElementById('goodwith-inputs');

        values.forEach(val => {
          // Activate the button
          const button = document.querySelector(`.good-with-toggle[data-value="${val}"]`);
          if (button) {
            button.classList.add('active');

            // Add hidden input
            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'goodWith';
            hiddenInput.value = val;
            hiddenInputsContainer.appendChild(hiddenInput);
          }
        });
      } else {
        const input = form.querySelector(`[name="${key}"]`);
        if (input) input.value = value;
      }
    });

    // Apply initial filters with proper goodWith handling
    if (initialFilters.goodWith) {
      initialFilters.goodWithArray = initialFilters.goodWith.split(',');
    }
    filterAnimals(initialFilters);
  });
</script>

<style>
  .filter-select {
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 0.75rem center;
    background-size: 1rem;
    appearance: none;
  }
  
  .filter-select:focus {
    @apply border-transparent;
    outline: 2px solid rgb(168 85 247);
    outline-offset: 2px;
  }

  .good-with-toggle {
    padding: 0.75rem 1rem;
    font-size: 0.875rem;
    font-weight: 500;
    border-radius: 0.5rem;
    border: 2px solid #d1d5db;
    color: #374151;
    background-color: white;
    transition: all 0.2s;
    outline: none;
  }

  .good-with-toggle:hover {
    background-color: #f9fafb;
  }

  .good-with-toggle:focus {
    outline: none;
    box-shadow: 0 0 0 2px #6366f1, 0 0 0 4px rgba(99, 102, 241, 0.1);
  }

  .good-with-toggle.active {
    border-color: #4f46e5;
    color: #3730a3;
    background-color: #eef2ff;
  }

  .good-with-toggle.disabled {
    opacity: 0.4;
    cursor: not-allowed;
    background-color: #f3f4f6;
    color: #9ca3af;
    border-color: #e5e7eb;
  }

  .good-with-toggle.disabled:hover {
    background-color: #f3f4f6;
    color: #9ca3af;
    border-color: #e5e7eb;
  }
</style>