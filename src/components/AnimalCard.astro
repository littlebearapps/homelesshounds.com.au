---
import type { ASMAnimal } from '../types/asm';
import { createAnimalSlug, createAnimalProfile, getCompatibilityIcon } from '../types/asm';

interface Props {
  animal: ASMAnimal;
  showBadges?: boolean;
  lazyLoad?: boolean;
}

const { animal, showBadges = true, lazyLoad = true } = Astro.props;

// Create SEO-friendly URL
const slug = createAnimalSlug(animal);
const speciesPath = animal.SPECIESNAME.toLowerCase();
const detailUrl = `/adopt/${speciesPath}/${animal.ID}/${slug}`;

// Create structured profile
const profile = createAnimalProfile(animal);

// Determine thumbnail URL
const thumbnailUrl = `https://service.sheltermanager.com/asmservice?account=st3418&method=animal_thumbnail&animalid=${animal.ID}`;

// Calculate days on shelter for display
const daysText = animal.DAYSONSHELTER === 1 ? '1 day' : `${animal.DAYSONSHELTER} days`;

// Get compatibility badges
const compatibilityBadges = [
  { condition: animal.ISGOODWITHCATS === 1, label: 'üê± Cat Friendly', color: 'bg-amber-100 text-amber-800' },
  { condition: animal.ISGOODWITHDOGS === 1, label: 'üêï Dog Friendly', color: 'bg-blue-100 text-blue-800' },
  { condition: animal.ISGOODWITHCHILDREN === 1, label: 'üë∂ Kid Friendly', color: 'bg-green-100 text-green-800' },
  { condition: animal.ISGOODWITHSMALLANIMALS === 1, label: 'üê∞ Small Animal Friendly', color: 'bg-pink-100 text-pink-800' },
  { condition: animal.ISHOUSETRAINED === 1, label: 'üè† House Trained', color: 'bg-indigo-100 text-indigo-800' },
].filter(badge => badge.condition);

// Get status badges
const statusBadges = [
  { condition: animal.NEUTERED === 1, label: '‚úÖ Desexed', color: 'bg-purple-100 text-purple-800' },
  { condition: animal.IDENTICHIPPED === 1 || animal.MICROCHIPPED === 1, label: 'üîç Microchipped', color: 'bg-gray-100 text-gray-800' },
  { condition: animal.HASSPECIALNEEDS === 1, label: 'üíñ Special Needs', color: 'bg-red-100 text-red-800' },
  { condition: profile.medical.vaccinationCount && profile.medical.vaccinationCount > 0, label: `üíâ ${profile.medical.vaccinationCount}x Vacc`, color: 'bg-teal-100 text-teal-800' },
].filter(badge => badge.condition);
---

<article class="asm3-adoptable-item group">
  <a href={detailUrl} class="asm3-adoptable-link block h-full">
    <!-- Reserved Badge -->
    {animal.HASACTIVERESERVE === 1 && (
      <div class="asm3-adoptable-reserved absolute top-3 right-3 z-10">
        <span class="bg-gradient-to-r from-red-500 to-red-600 text-white px-3 py-1 rounded-full text-xs font-bold uppercase tracking-wider shadow-lg transform rotate-12">
          Reserved
        </span>
      </div>
    )}

    <!-- Animal Photo -->
    <div class="relative overflow-hidden rounded-t-xl">
      <img 
        src={thumbnailUrl}
        alt={`${animal.ANIMALNAME} - ${animal.BREEDNAME} ${animal.SPECIESNAME}`}
        class="asm3-adoptable-thumbnail w-full h-72 object-cover transition-transform duration-500 group-hover:scale-105"
        loading={lazyLoad ? "lazy" : "eager"}
        decoding="async"
      />
      <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
    </div>

    <!-- Card Content -->
    <div class="p-6">
      <!-- Animal Name -->
      <h3 class="asm3-adoptable-name text-2xl font-bold text-gray-900 mb-3 group-hover:text-purple-600 transition-colors duration-200">
        {animal.ANIMALNAME}
      </h3>

      <!-- Basic Info -->
      <div class="asm3-adoptable-tagline space-y-2 mb-4">
        <div class="flex items-center text-gray-600">
          <span class="text-sm font-medium">{animal.BREEDNAME}</span>
          {animal.CROSSBREED === 1 && (
            <span class="ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">Mix</span>
          )}
        </div>
        
        <div class="flex items-center justify-between text-sm text-gray-500">
          <span class="flex items-center">
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            {animal.AGEGROUP}
          </span>
          <span class="flex items-center">
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            {animal.SEXNAME}
          </span>
          <span class="flex items-center">
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5a2 2 0 012-2h4a2 2 0 012 2v0H8v0z" />
            </svg>
            {animal.SIZENAME}
          </span>
        </div>
      </div>

      <!-- Enhanced Badges -->
      {showBadges && (compatibilityBadges.length > 0 || statusBadges.length > 0) && (
        <div class="space-y-2 mb-4">
          <!-- Compatibility Badges -->
          {compatibilityBadges.length > 0 && (
            <div class="flex flex-wrap gap-1.5">
              {compatibilityBadges.map(badge => (
                <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${badge.color}`}>
                  {badge.label}
                </span>
              ))}
            </div>
          )}
          
          <!-- Status Badges -->
          {statusBadges.length > 0 && (
            <div class="flex flex-wrap gap-1.5">
              {statusBadges.map(badge => (
                <span class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${badge.color}`}>
                  {badge.label}
                </span>
              ))}
            </div>
          )}
        </div>
      )}

      <!-- Adoption Fee -->
      {profile.adoption.fee && (
        <div class="mb-3">
          <div class="inline-flex items-center px-3 py-2 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg text-sm">
            <span class="text-purple-600 font-semibold">üí∞ Adoption Fee: ${profile.adoption.fee}</span>
          </div>
        </div>
      )}

      <!-- Location -->
      {profile.adoption.location && (
        <div class="mb-3 text-sm text-gray-600 flex items-center">
          <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
          </svg>
          üìç {profile.adoption.location}
        </div>
      )}

      <!-- Time on Shelter -->
      <div class="text-xs text-gray-400 border-t pt-3 mt-4">
        In care for {daysText}
      </div>

      <!-- Hover Effect -->
      <div class="mt-4 text-center opacity-0 group-hover:opacity-100 transition-opacity duration-200">
        <span class="text-purple-600 font-medium text-sm">View Details ‚Üí</span>
      </div>
    </div>
  </a>
</article>

<style>
  .asm3-adoptable-item {
    background-color: white;
    border: 1px solid rgb(229 231 235);
    border-radius: 0.75rem;
    box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    transition: all 0.3s;
    position: relative;
    overflow: hidden;
  }
  
  .asm3-adoptable-item:hover {
    transform: translateY(-0.5rem);
    border-color: rgb(196 181 253);
    box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
  }

  .asm3-adoptable-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 0.25rem;
    background: linear-gradient(90deg, rgb(59 130 246), rgb(168 85 247), rgb(236 72 153));
    opacity: 0;
    transition: opacity 0.3s;
  }

  .asm3-adoptable-item:hover::before {
    opacity: 1;
  }
</style>